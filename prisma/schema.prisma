generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                String            @id @default(uuid())
  firstName         String
  lastName          String
  idNumber          String            @unique
  phoneNumber       String
  email             String            @unique
  physicalAddress   String
  driversLicencePic String
  isWhatsappNumber  Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  customerVehicles  CustomerVehicle[]
  incidents         Incident[]

  @@index([email])
  @@index([idNumber])
  @@map("customers")
}

model Branch {
  id      String @id @default(uuid())
  name    String
  address String
  parts   Part[]

  @@map("branches")
}

model VehicleBrand {
  id               String            @id @default(uuid())
  name             String
  logo             String
  customerVehicles CustomerVehicle[]
  parts            Part[]

  @@map("vehicle_brands")
}

model PartCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parts     Part[]
}

model Part {
  id             String       @id @default(uuid())
  model          String
  make           String
  partNumber     Int          @unique @default(autoincrement())
  quantity       Int
  name           String
  condition      String
  brandId        String
  branchId       String
  partCategoryId String
  price          Float
  picture        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  partCategory   PartCategory @relation(fields: [partCategoryId], references: [id])
  brand          VehicleBrand @relation(fields: [brandId], references: [id])
  branch         Branch       @relation(fields: [branchId], references: [id])
}

model CustomerVehicle {
  id                 String   @id @default(uuid())
  model              String
  registrationNumber String   @unique
  engineNumber       String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  customerId String
  brandId    String

  customer  Customer     @relation(fields: [customerId], references: [id])
  brand     VehicleBrand @relation(fields: [brandId], references: [id])
  incidents Incident[]

  @@map("customer_vehicles")
}

model Incident {
  id               String   @id @default(uuid())
  licenseDisk      String
  numberPlateFront String
  frontView        String
  numberPlateRear  String
  rearView         String
  leftSide         String
  rightSide        String
  dashboard        String
  interiorSeating  String
  bootSpace        String
  rearBumber       String
  engineBay        String
  damageArea       String
  closeUpOfDamage  String
  notes            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  customerId String
  vehicleId  String

  customer Customer        @relation(fields: [customerId], references: [id])
  vehicle  CustomerVehicle @relation(fields: [vehicleId], references: [id])

  @@map("incidents")
}

model InsuranceProvider {
  id   String @id @default(uuid())
  name String
  rate Float  @default(0)

  @@map("insurers")
}
